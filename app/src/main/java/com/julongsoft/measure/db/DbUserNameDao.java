package com.julongsoft.measure.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.julongsoft.measure.entity.DbUserName;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_USER_NAME".
*/
public class DbUserNameDao extends AbstractDao<DbUserName, String> {

    public static final String TABLENAME = "DB_USER_NAME";

    /**
     * Properties of entity DbUserName.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Username = new Property(0, String.class, "username", true, "USERNAME");
    }


    public DbUserNameDao(DaoConfig config) {
        super(config);
    }
    
    public DbUserNameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_USER_NAME\" (" + //
                "\"USERNAME\" TEXT PRIMARY KEY NOT NULL );"); // 0: username
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_USER_NAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbUserName entity) {
        stmt.clearBindings();
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(1, username);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbUserName entity) {
        stmt.clearBindings();
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(1, username);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DbUserName readEntity(Cursor cursor, int offset) {
        DbUserName entity = new DbUserName( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // username
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbUserName entity, int offset) {
        entity.setUsername(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbUserName entity, long rowId) {
        return entity.getUsername();
    }
    
    @Override
    public String getKey(DbUserName entity) {
        if(entity != null) {
            return entity.getUsername();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbUserName entity) {
        return entity.getUsername() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
