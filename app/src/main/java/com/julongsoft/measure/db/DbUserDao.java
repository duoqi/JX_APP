package com.julongsoft.measure.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.julongsoft.measure.entity.DbUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_USER".
*/
public class DbUserDao extends AbstractDao<DbUser, Long> {

    public static final String TABLENAME = "DB_USER";

    /**
     * Properties of entity DbUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Token = new Property(0, String.class, "token", false, "TOKEN");
        public final static Property Deadline = new Property(1, String.class, "deadline", false, "DEADLINE");
        public final static Property Id = new Property(2, Long.class, "id", true, "_id");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property IsDeleted = new Property(6, Integer.class, "isDeleted", false, "IS_DELETED");
        public final static Property Notes = new Property(7, String.class, "notes", false, "NOTES");
        public final static Property Tel = new Property(8, String.class, "tel", false, "TEL");
        public final static Property OrgId = new Property(9, Integer.class, "orgId", false, "ORG_ID");
        public final static Property OrgName = new Property(10, String.class, "orgName", false, "ORG_NAME");
        public final static Property MaxPeroid = new Property(11, Integer.class, "maxPeroid", false, "MAX_PEROID");
        public final static Property Roles = new Property(12, String.class, "roles", false, "ROLES");
    }


    public DbUserDao(DaoConfig config) {
        super(config);
    }
    
    public DbUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_USER\" (" + //
                "\"TOKEN\" TEXT," + // 0: token
                "\"DEADLINE\" TEXT," + // 1: deadline
                "\"_id\" INTEGER PRIMARY KEY ," + // 2: id
                "\"CODE\" TEXT," + // 3: code
                "\"NAME\" TEXT," + // 4: name
                "\"PASSWORD\" TEXT," + // 5: password
                "\"IS_DELETED\" INTEGER," + // 6: isDeleted
                "\"NOTES\" TEXT," + // 7: notes
                "\"TEL\" TEXT," + // 8: tel
                "\"ORG_ID\" INTEGER," + // 9: orgId
                "\"ORG_NAME\" TEXT," + // 10: orgName
                "\"MAX_PEROID\" INTEGER," + // 11: maxPeroid
                "\"ROLES\" TEXT);"); // 12: roles
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbUser entity) {
        stmt.clearBindings();
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(1, token);
        }
 
        String deadline = entity.getDeadline();
        if (deadline != null) {
            stmt.bindString(2, deadline);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }
 
        Integer isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(7, isDeleted);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(8, notes);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(9, tel);
        }
 
        Integer orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindLong(10, orgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(11, orgName);
        }
 
        Integer maxPeroid = entity.getMaxPeroid();
        if (maxPeroid != null) {
            stmt.bindLong(12, maxPeroid);
        }
 
        String roles = entity.getRoles();
        if (roles != null) {
            stmt.bindString(13, roles);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbUser entity) {
        stmt.clearBindings();
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(1, token);
        }
 
        String deadline = entity.getDeadline();
        if (deadline != null) {
            stmt.bindString(2, deadline);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }
 
        Integer isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(7, isDeleted);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(8, notes);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(9, tel);
        }
 
        Integer orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindLong(10, orgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(11, orgName);
        }
 
        Integer maxPeroid = entity.getMaxPeroid();
        if (maxPeroid != null) {
            stmt.bindLong(12, maxPeroid);
        }
 
        String roles = entity.getRoles();
        if (roles != null) {
            stmt.bindString(13, roles);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }    

    @Override
    public DbUser readEntity(Cursor cursor, int offset) {
        DbUser entity = new DbUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // token
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deadline
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // password
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isDeleted
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // notes
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tel
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // orgId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // orgName
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // maxPeroid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // roles
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbUser entity, int offset) {
        entity.setToken(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeadline(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsDeleted(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setNotes(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrgId(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrgName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMaxPeroid(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setRoles(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
